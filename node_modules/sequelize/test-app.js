"use strict";
/* jshint esnext:true, -W110 */

var Sequelize, sequelize, DataTypes, Promise = require('bluebird'), _ = require('lodash'), moment = require('moment');
var Benchmark = require('benchmark');

Sequelize = DataTypes = require('./index.js');
// var db = sequelize = new Sequelize('sequelize', 'root', '', {
var db = sequelize = new Sequelize('sequelize_test', 'postgres', 'postgres', {
  dialect: 'postgres',
//var db = sequelize = new Sequelize('sequelize-test-72', 'sequelize', 'nEGkLma26gXVHFUAHJxcmsrK', {
  //dialect: 'mssql',
  //host: 'mssql.sequelizejs.com',
  //port: 11433,
  //dialect: 'sqlite',
  //storage: '/tmp/test.sqlite',
//  timezone: '+05:30',
  define: {
    // timestamps: false,
  },
  logging: false
});

const User = sequelize.define('user');
const Project = sequelize.define('project');
const ProjectUser = sequelize.define('project_user', {}, { timestamps: false });

User.Projects = User.belongsToMany(Project, { through: ProjectUser });
Project.belongsToMany(User, { as: 'members', through: ProjectUser });

function getRandomInt(min, max) {
  min = 1
  max = 100000
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
const ids = [];
for (let i = 0 ; i < 100 ; i++) {
  ids.push(getRandomInt());
}


var suite = new Benchmark.Suite();

suite
  .add('cached', function () {
    sequelize.getQueryInterface().QueryGenerator.selectQuery('user', {
      attributes: [],
      cacheBase: true,
      groupedLimit: {
        limit: 3,
        on: User.Projects,
        values: ids
      }
    }, User);
  })
  .add('no cache', function () {
    sequelize.getQueryInterface().QueryGenerator.selectQuery('user', {
      attributes: [],
      groupedLimit: {
        limit: 3,
        on: User.Projects,
        values: ids
      }
    }, User);
  })
  .on('complete', result => {
    console.log(result.currentTarget[0].name);
    console.log(result.currentTarget[0].stats);
    console.log(result.currentTarget[1].name);
    console.log(result.currentTarget[1].hz);
  })
  .run();

// return sequelize.sync({
//   force: true,
//   logging: console.log
// })
//   .then(() => {
//
//   })
//   .then(console.log)
//   .finally(() => sequelize.close());
